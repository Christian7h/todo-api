---
import Layout from '../layouts/Layout.astro';
import TaskList from '../components/TaskList.astro';
// Obtener el token desde la cookie
const token = Astro.cookies.get("token")?.value;

if (!token) {
  return Astro.redirect("/login");
}

let tasks = [];
try {
  const response = await fetch(`${import.meta.env.API_URL}`, {
    headers: {
      "Authorization": `Bearer ${token}`,
    },
  });
  if (!response.ok) throw new Error("Error al obtener tareas");
  const data = await response.json();
  tasks = data.tasks || [];
} catch (error) {
  console.error(error);
  tasks = [];
}// Filtrar tareas
const pendingTasks = tasks.filter((task) => !task.completed);
const completedTasks = tasks.filter((task) => task.completed);
let activeTab = "pending"; // Estado inicial

---

<Layout title="Mis Tareas | TodoApp">
	<main class="max-w-4xl mx-auto px-4 py-8">
	  <div class="flex justify-between items-center mb-8">
		<h1 class="text-3xl font-bold text-gray-800">Mis Tareas</h1>
		<button id="logout" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md flex items-center transition-colors">
		  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
		  </svg>
		  Cerrar Sesión
		</button>
	  </div>
	  
	  <div class="bg-white rounded-lg shadow-md p-6 mb-8">
		<h2 class="text-xl font-semibold text-gray-700 mb-4">Agregar nueva tarea</h2>
		<form id="taskForm" class="space-y-4">
		  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
			<div>
			  <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Título</label>
			  <input 
				type="text" 
				id="title"
				name="title" 
				placeholder="¿Qué necesitas hacer?" 
				required 
				class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
			  />
			</div>
			<div>
			  <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
			  <input 
				type="text" 
				id="description"
				name="description" 
				placeholder="Detalles adicionales"
				class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
			  />
			</div>
		  </div>
		  <div class="flex justify-end">
			<button 
			  type="submit" 
			  class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors"
			>
			  <div class="flex items-center">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
				</svg>
				Agregar Tarea
			  </div>
			</button>
		  </div>
		</form>
	  </div>
 <!-- Contenedor de Tabs -->
<div class="flex mb-4">
	<button 
	  class="tab-button px-4 py-2 rounded-l-md bg-indigo-600 text-white" 
	  data-tab="pending" 
	  onclick="switchTab('pending')">
	  Pendientes
	</button>
	<button 
	  class="tab-button px-4 py-2 rounded-r-md bg-gray-200 text-gray-600" 
	  data-tab="completed" 
	  onclick="switchTab('completed')">
	  Completadas
	</button>
  </div>
  
  <!-- Lista de tareas -->
  <div id="pendingTasks">
	<TaskList tasks={pendingTasks} />
  </div>
  
  <div id="completedTasks" class="hidden">
	<TaskList tasks={completedTasks} />
  </div>
  
	</main>
	<script is:inline>
		function switchTab(tab) {
    // Mostrar/Ocultar listas de tareas
    document.getElementById("pendingTasks").classList.toggle("hidden", tab !== "pending");
    document.getElementById("completedTasks").classList.toggle("hidden", tab !== "completed");

    // Actualizar clases de los botones
    document.querySelectorAll(".tab-button").forEach((btn) => {
      const isActive = btn.getAttribute("data-tab") === tab;
      btn.classList.toggle("bg-indigo-600", isActive);
      btn.classList.toggle("text-white", isActive);
      btn.classList.toggle("bg-gray-200", !isActive);
      btn.classList.toggle("text-gray-600", !isActive);
    });
  }
	</script>
  </Layout>
  
  <script type="module">
	// Crear tarea
	document.getElementById("taskForm").addEventListener("submit", async (e) => {
	  e.preventDefault();
	  const formData = new FormData(e.target);
	  const title = formData.get("title");
	  const description = formData.get("description");
	  const token = document.cookie
		.split("; ")
		.find((row) => row.startsWith("token="))
		?.split("=")[1];
		
	  const response = await fetch(`https://nodejs-todo-api-e6206be79a01.herokuapp.com/api/tasks`, {
		method: "POST",
		headers: {
		  "Content-Type": "application/json",
		  "Authorization": `Bearer ${token}`,
		},
		body: JSON.stringify({ title, description }),
	  });
		
	  if (response.ok) {
		window.location.reload();
	  } else {
		alert("Error al agregar la tarea");
	  }
	});
	  
	// Eliminar tarea
	document.querySelectorAll(".delete-task").forEach((button) => {
	  button.addEventListener("click", async () => {
		const taskId = button.getAttribute("data-task-id");
		const token = document.cookie
		  .split("; ")
		  .find((row) => row.startsWith("token="))
		  ?.split("=")[1];
		  
		const response = await fetch(`https://nodejs-todo-api-e6206be79a01.herokuapp.com/api/tasks/${taskId}`, {
		  method: "DELETE",
		  headers: {
			"Authorization": `Bearer ${token}`,
		  },
		});
		  
		if (response.ok) {
		  window.location.reload(); // Recarga para actualizar la lista
		} else {
		  alert("Error al eliminar la tarea");
		}
	  });
	});
	  
	// Marcar tarea como completada
	document.querySelectorAll(".task-checkbox").forEach((checkbox) => {
	  checkbox.addEventListener("change", async (e) => {
		const taskId = checkbox.getAttribute("data-task-id");
		const completed = e.target.checked;
		const token = document.cookie
		  .split("; ")
		  .find((row) => row.startsWith("token="))
		  ?.split("=")[1];
  
		const response = await fetch(`https://nodejs-todo-api-e6206be79a01.herokuapp.com/api/tasks/${taskId}`, {
		  method: "PUT",
		  headers: {
			"Content-Type": "application/json",
			"Authorization": `Bearer ${token}`,
		  },
		  body: JSON.stringify({ completed }),
		});
  
		if (response.ok) {
		  // Actualizar la interfaz de usuario sin recargar
		  const listItem = checkbox.closest('li');
		  const taskTitle = listItem.querySelector('p:first-child');
		  const taskDesc = listItem.querySelector('p:last-child');
		  
		  if (completed) {
			taskTitle.classList.add('line-through', 'text-gray-500');
			window.location.reload();
			if (taskDesc) {
			  taskDesc.classList.remove('text-gray-600');
			  taskDesc.classList.add('text-gray-400');
			}
		  } else {
			taskTitle.classList.remove('line-through', 'text-gray-500');
			if (taskDesc) {
			  taskDesc.classList.remove('text-gray-400');
			  taskDesc.classList.add('text-gray-600');
			}
		  }
		} else {
		  alert("Error al actualizar la tarea");
		  // Revertir la casilla si falla la actualización
		  e.target.checked = !completed;
		}
	  });
	});
	  
	// Cerrar sesión
	document.getElementById("logout").addEventListener("click", () => {
	  document.cookie = "token=; Max-Age=0; path=/";
	  window.location.href = "/login";
	});
	
  </script>